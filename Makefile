# Project name
PROJECT=pvtbox
ARCH=$(shell uname -m)
# Path to install virtualenv for the project
VENV=virtualenv/$(PROJECT)
# Python version to be used
PYTHON=python3
# To include binary modules
PYTHONPATH?=so
ifeq ($(shell uname), Darwin)
    OS=osx
else
    OS=linux
endif

ifeq ($(shell uname), Linux)
    ifneq ("$(wildcard /usr/bin/python3.7)", "")
      PYTHON=python3.7
    endif
    USE_SITE_PACKAGES=--no-site-packages
    PATH := $(PATH):virtualenv/$(PROJECT)/bin
else
    USE_SITE_PACKAGES=--system-site-packages
endif

USE_SITE_PACKAGES=--no-site-packages

# Target to initialize virtualenv itself
$(VENV)/init_ts:
	virtualenv $(USE_SITE_PACKAGES) -p $(PYTHON) $(VENV) && touch $@


# Target to install virtualenv dependencies
$(VENV)/deps_ts: requirements.txt
	$(VENV)/bin/pip install -U -r requirements.txt && touch $@


# Target to initialize virtualenv and install dependencies specified
.PHONY: venv clean-venv
venv: $(VENV)/init_ts $(VENV)/deps_ts build_resources

# Target to remove virtualenv files
clean-venv:
	rm -rf $(VENV)

.PHONY: build clean-build
build: venv
	PYTHONPATH=$(PYTHONPATH) \
	$(VENV)/bin/pyinstaller --clean --log-level WARN --noconfirm -F \
	--key=7h3SeCr37key --specpath=./pyinstaller/$(OS) \
	--workpath=$(PWD)/build/$(OS)-$(ARCH) --distpath=$(PWD)/dist/$(OS)-$(ARCH) \
	pyinstaller/$(OS)/service.spec
	PYTHONPATH=$(PYTHONPATH) \
	$(VENV)/bin/pyinstaller --clean --log-level WARN --noconfirm -F \
	--key=7h3SeCr37key --specpath=./pyinstaller/$(OS) \
	--workpath=$(PWD)/build/$(OS)-$(ARCH) --distpath=$(PWD)/dist/$(OS)-$(ARCH) \
	pyinstaller/$(OS)/app.spec


# Remove PyInstaller stuff
clean-build:
	rm -rf ./dist/$(OS)-$(ARCH)
	rm -rf ./build/$(OS)-$(ARCH)


# Target to remove files generated by python
.PHONY: clean-py
clean-py:
	# Remove pyc files
	find . -name '*.pyc' -type f -exec rm {} +
	# Remove pytest cache
	find . -name '.cache' -type d -exec rm -r {} +
	find . -name '__pycache__' -type d -exec rm -r {} +


# Target to remove automatically generated files
.PHONY: clean
clean: clean-py clean-build
	# Remove coverage report
	rm -rf ./htmlcov
	rm -f ./.coverage


# Create tar archive of the latest commit
.PHONY: tarball
tarball:
	rm -f ../$(PROJECT).tar.gz
	git archive --prefix=$(PROJECT)/ -o ../$(PROJECT).tar.gz HEAD

# Compile resources and window file to python source
.PHONY: build_resources
build_resources:
	pyside2-rcc -o pvtbox_main_rc.py application/ui/pvtbox_main.qrc
	pyside2-uic -o pvtbox_main.py application/ui/pvtbox_main.ui
	pyside2-uic -o settings.py application/ui/settings.ui
	pyside2-uic -o share_files.py application/ui/share_files.ui
	pyside2-uic -o selective_sync.py application/ui/selective_sync.ui
	pyside2-uic -o device_list.py application/ui/device_list.ui
	pyside2-uic -o lost_folder_dialog.py application/ui/lost_folder_dialog.ui
	pyside2-uic -o tutorial.py application/ui/tutorial.ui
	pyside2-uic -o transfers.py application/ui/transfers.ui
	pyside2-uic -o insert_link.py application/ui/insert_link.ui	
	pyside2-uic -o about.py application/ui/about.ui
	pyside2-uic -o notifications.py application/ui/notifications.ui
	pyside2-uic -o support.py application/ui/support.ui
	pyside2-uic -o collaborations.py application/ui/collaborations.ui
	protoc --python_out=service/network/browser_sharing/proto --proto_path=service/network/browser_sharing/proto service/network/browser_sharing/proto/proto.proto

